{"ast":null,"code":"class Api {\n  constructor(apiUrl, authToken) {\n    this.apiUrl = apiUrl;\n    this.authToken = authToken;\n  }\n  async getIds(offset = 0, limit = 50) {\n    try {\n      const authToken = this.generateAuthToken();\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Auth': authToken\n        },\n        body: JSON.stringify({\n          action: 'get_ids',\n          params: {\n            offset,\n            limit\n          }\n        })\n      });\n      const data = await response.json();\n      return data.result;\n    } catch (error) {\n      console.error('Error fetching IDs:', error);\n      throw error;\n    }\n  }\n  async getItems(ids) {\n    try {\n      const authToken = this.generateAuthToken();\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Auth': authToken\n        },\n        body: JSON.stringify({\n          action: 'get_items',\n          params: {\n            ids\n          }\n        })\n      });\n      const data = await response.json();\n\n      // Удаляем дубликаты по идентификатору\n      const uniqueItems = [];\n      const seenIds = new Set();\n      data.result.forEach(item => {\n        if (!seenIds.has(item.id)) {\n          uniqueItems.push(item);\n          seenIds.add(item.id);\n        }\n      });\n      return uniqueItems;\n    } catch (error) {\n      console.error('Error fetching items:', error);\n      throw error;\n    }\n  }\n  async filter(params) {\n    try {\n      const authToken = this.generateAuthToken();\n      const response = await fetch(this.apiUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'X-Auth': authToken\n        },\n        body: JSON.stringify({\n          action: 'filter',\n          params\n        })\n      });\n      const data = await response.json();\n      return data.result;\n    } catch (error) {\n      console.error('Error filtering items:', error);\n      throw error;\n    }\n  }\n  generateAuthToken() {\n    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');\n    return md5(`${this.authToken}_${timestamp}`);\n  }\n}\nexport default Api;","map":{"version":3,"names":["Api","constructor","apiUrl","authToken","getIds","offset","limit","generateAuthToken","response","fetch","method","headers","body","JSON","stringify","action","params","data","json","result","error","console","getItems","ids","uniqueItems","seenIds","Set","forEach","item","has","id","push","add","filter","timestamp","Date","toISOString","slice","replace","md5"],"sources":["C:/Users/Игорь/dev/valantis/ValantisTestTask/src/Api.js"],"sourcesContent":["class Api {\r\n  constructor(apiUrl, authToken) {\r\n    this.apiUrl = apiUrl;\r\n    this.authToken = authToken;\r\n  }\r\n\r\n  async getIds(offset = 0, limit = 50) {\r\n    try {\r\n      const authToken = this.generateAuthToken();\r\n      const response = await fetch(this.apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Auth': authToken\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'get_ids',\r\n          params: { offset, limit }\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      return data.result;\r\n    } catch (error) {\r\n      console.error('Error fetching IDs:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getItems(ids) {\r\n    try {\r\n      const authToken = this.generateAuthToken();\r\n      const response = await fetch(this.apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Auth': authToken\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'get_items',\r\n          params: { ids }\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      \r\n      // Удаляем дубликаты по идентификатору\r\n      const uniqueItems = [];\r\n      const seenIds = new Set();\r\n      data.result.forEach(item => {\r\n        if (!seenIds.has(item.id)) {\r\n          uniqueItems.push(item);\r\n          seenIds.add(item.id);\r\n        }\r\n      });\r\n      \r\n      return uniqueItems;\r\n    } catch (error) {\r\n      console.error('Error fetching items:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async filter(params) {\r\n    try {\r\n      const authToken = this.generateAuthToken();\r\n      const response = await fetch(this.apiUrl, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-Auth': authToken\r\n        },\r\n        body: JSON.stringify({\r\n          action: 'filter',\r\n          params\r\n        })\r\n      });\r\n      const data = await response.json();\r\n      return data.result;\r\n    } catch (error) {\r\n      console.error('Error filtering items:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  generateAuthToken() {\r\n    const timestamp = new Date().toISOString().slice(0, 10).replace(/-/g, '');\r\n    return md5(`${this.authToken}_${timestamp}`);\r\n  }\r\n}\r\n\r\nexport default Api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}